#!/usr/bin/env python
#-*- coding: utf-8 -*-

import cPickle
import os
import sqlite3
import sys

project_path = os.path.abspath(os.path.dirname(os.path.abspath(__file__)) +
                               "/../..")
sys.path.append(project_path)

import src.matcher
import src.timer

# ------------------------------------------------------------------------------
def make_lists():
    # Generated by find_all_words_inclusions.py
    [found_words_dict, words] = cPickle.load(
        open("../../data/words_inclusions.txt"))

    keys_all = {key : 0
                for key, value in found_words_dict.items()
                if sum(value.values()) > 1}
    keys_unique = {key : 0
                   for key, value in found_words_dict.items()
                   if len(value) > 1}

    print len(keys_all), len(keys_unique)
    return keys_all, keys_unique

# ------------------------------------------------------------------------------
def fetch_rows(cursor, rows_number=100):
    fetch = cursor.fetchmany
    while True:
        rows = fetch(rows_number)
        if not rows:
            break

        for row in rows:
            yield row

# ------------------------------------------------------------------------------
def make_sql_database(local_database_path, full_database_path, rowids):
    timer = src.timer.Timer()
    local_database = sqlite3.connect(local_database_path)
    local_database.execute('pragma foreign_keys=ON')

    full_database = sqlite3.connect(full_database_path)
    full_database.execute("CREATE TABLE IF NOT EXISTS chosen_ids "
                          "(key INTEGER UNIQUE)")

    for rowid in rowids:
        full_database.execute("INSERT INTO chosen_ids(key) VALUES (%d)" \
                               % rowid)

    result = full_database.execute("SELECT * FROM texts "
                                   "WHERE text_database_index IN "
                                   "(SELECT key FROM chosen_ids);")

    local_database.execute("""
      CREATE TABLE IF NOT EXISTS texts (
          text_database_index INTEGER PRIMARY KEY,
          lem_text TEXT
        )
      """)

    for row in result:
        local_database.execute("INSERT INTO texts "
                       "(text_database_index, lem_text) "
                       "VALUES (%d, '%s')" \
                       % (row[0], row[1]))

    full_database.execute("DROP TABLE chosen_ids;")
    full_database.commit()
    local_database.commit()

    timer.print_from_start("Sql database created.")

# ------------------------------------------------------------------------------
def make_txt_files(cursor):
    timer = src.timer.Timer()
    keys_all, keys_unique = make_lists()

    cursor.execute('SELECT max(text_database_index) FROM texts')
    max_id = cursor.fetchone()[0]

    cursor.execute("SELECT text_database_index, lem_text FROM texts")

    timer.set_point()
    result_all = {}
    result_uniq = {}

    for item in fetch_rows(cursor):

        if item[0] in keys_all:
            result_all[item[0]] = (item[1].encode("utf-8"))

        if item[0] in keys_unique:
            result_uniq[item[0]] = (item[1].encode("utf-8"))

        if item[0] % 50000 == 0:
            output = "%.2f%% done (%d from %d)" % \
                (float(item[0]) / max_id * 100.0, item[0], max_id)
            timer.print_from_last_point(output)

    with open("/mnt/data/Sync/content-filter/ethnic_docs_unique_words.txt",
              "w") as log:
        cPickle.dump([result_uniq], log)

    with open("/mnt/data/Sync/content-filter/ethnic_docs_all_words.txt",
              "w") as log:
        cPickle.dump([result_all], log)

    timer.print_from_last_point("Files saved.")

# ------------------------------------------------------------------------------
if __name__ == "__main__":
    full_database = '/mnt/data/Sync/content-filter/data_sqlite.db'
    conn = sqlite3.connect(full_database)
    conn.execute('pragma foreign_keys=ON')

    make_txt_files(conn.cursor())
    # keys_all, keys_unique = make_lists()
    # make_sql_database('/mnt/data/Sync/content-filter/ethnic_all.db',
    #                   full_database, keys_all)
    # make_sql_database('/mnt/data/Sync/content-filter/ethnic_unique.db',
    #                   full_database, keys_unique)
